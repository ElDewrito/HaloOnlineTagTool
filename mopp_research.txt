This document contains raw notes taken during experimenting. It is not well refined. 

0xD0E3A0 is the address of the routine: MOPP byte code interpreter. Opcodes are usually grouped in clusters of 3 or 4,
where during the instruction decoding phase the coordinate (x/y/z) is obtained. 
A lot of the instructions are range tests for one coordinate. When put in sequence, these tests are almost like a k-d tree. 
this is a good resource: http://niftools.sourceforge.net/wiki/Nif_Format/Mopp . Although it's quite dated and incomplete,
it probably has a better description of Mopp. The third theory on mopp seems to be most accurate (being a bounding 
volume tree). It also limits the physics objects to 'triangle' (which is a class of physics object), but this could 
be 'polyhedron', 'sphere', 'box' etc.  

There are four phmos that use MOPP. They are:
{phmo:2E26} : fork-lift. Mopp code begins 0x890 into the tag
{phmo:3998} : military barricade. Mopp code begins 0x780 into the tag
{phmo:41BF} : lod pelican. Mopp code begins 0x600 into the tag
{phmo:430a} : electric-cart. Mopp code begins 0x1380 into the tag

The Mopp codes in these tags begin with what I suspect to be a 0x30 byte header. To see Mopp in action, 
put a data-breakpoint on- {address of tag in memory} + {mopp code offset into tag} + {0x30} , 
then put another physics object spatially close to the object in game.
Electric-cart on Icebox works great for this. 

--------------------------------------------------------------------
eldorado.exe+85CCC0 - 53                    - push ebx
	(pointer indirection)
	eldorado.exe+1F6E20 - 53                    - push ebx
	(2x)
		eldorado.exe+84DC90 - 53                    - push ebx
			eldorado.exe+90EE70 - 55                    - push ebp
				eldorado.exe+90E3A0 - 55                    - push ebp
				(2x possible data breakpoint hits)

				

D0E3A0 - MOPP byte code interpreter 

DOEAAC is a lookup table put spatially near the code


opcode 0x27 is handled by loc_D0E69E
	routine description: It gets the next byte following the opcode, compares it to [esi+ecx*4 - 0x98],
	 and jumps if the value at this location is less-than operand 'a' to end (exit?). ecx holds the
	 opcode at this stage. This memory lookup is odd because 4*0x27 = 0x9c, 4 away from 0x98, as if it
	 expects other memory lookups around esi depending on the opcode. This is confirmed for opcode 0x26
	 
	In this case, a very large constant was located at the memory address 0x7f.
	 'a' was 0, so  0x7f000000 (little endian) was compared to word 0 ('a' byte zero extended)
	 
	Move byte second operand 'b' into edx zero extended. Compare second operand to similar memory
	lookup as for first operand but with 16 bytes greater in address. In this case, the value  for 
	operand 'b' is 0x2a. Jump-greater-equal did not fire off, add 3 to instruction counter, 
	start again at loc_D0E3D9

	The first memory lookup was not the same as the second, this seems like range-collides-range calculation
	 
	 
opcode 0x26 is also handled by loc_D0E69E
	if [esi+ecx*4-0x98] - a < 0: exit // this is just like opcode 0x27 but this time ecx is 0x26, not 0x27
	if [esi+ecx*4-0x88] - b >= 0: exit 


opcode 0x11 is handled by loc_D0E5B8 

	load operand b & a, 
	if [esi+ecx*4-0x40] - b > 0: check_c else { if [esi+ecx*4-30h] - a < 0 continue else exit }
	 
	check_c:
	add c to program-counter ebx;
	if [esi+ecx*4-30h] - a >= 0: continue else odd_routine;
	 
	odd_routine:
	mov     edx, [ebp+arg_8]
	push    edx
	mov     ecx, ebx
	sub     ecx, eax //eax holds operand 'c', so this is un-doing the jump by subtracting 'c' from the program-counter
	push    ecx // at loc_D0E3D3, before entering loop that is so often continued, [ebp+0xc] is put into ebx (the program counter) 
	mov     ecx, [esp+278h+var_258] // [esp + 0x20], IDA bad?
	push    esi 
	call    sub_D0E3A0 //recursion: execute code after last instruction in a 
	jmp     loc_D0E3D9 // continue

opcode 0x10 like 0x11 but ecx is 0x10 so a different coordinate (4 bytes below compared to opcode 0x11) is accessed

opcode 0x28 like 0x27 but ecx is 0x28, different coordinate (4 bytes above compared to opcode 0x27) is accessed

opcode 0x12 like 0x11 but ecx is 0x10, different coordinate (4 bytes above compared to opcode 0x11) is accessed


opcodes 0x29 - 0x2b are handled by 0xd0e6c8

	loc_D0E6C8:
		/*Start by loading operands 'a', 'b' & 'c'. this makes an int24,
		with 'a' in higest byte, 'b' in center byte, 'c' in lowest byte. */
		movzx   eax, byte ptr [ebx+1]
		movzx   edx, byte ptr [ebx+2]
		shl     eax, 8
		add     edx, eax
		movzx   eax, byte ptr [ebx+3]
		shl     edx, 8
		add     edx, eax
		/* prepare something in eax and do some other jump stuff.
			if [eax+ecx*4-0x94] - abc < 0: exit else { second_check}*/
		mov     eax, [esp+270h+var_258] // [esp+18]
		cmp     [eax+ecx*4-94h], edx // this is the (bounding box?) coordinate access as seen for 0x26-0x28
									 // but this time the 
		jl      loc_D0EA1B


	second_check:
		/*operands 'd', 'e' & 'f'.  put into an int24 'def' with f the lsb*/
		movzx   edx, byte ptr [ebx+4]
		movzx   edi, byte ptr [ebx+5]
		shl     edx, 8
		add     edx, edi
		movzx   edi, byte ptr [ebx+6]
		shl     edx, 8
		add     edx, edi
		/*compare & jump only. eax appears as the offset this time. it was loaded from [esp+18]
			if [eax+ecx*4-84h] - def > 0: exit else continue
		 */
		cmp     [eax+ecx*4-84h], edx
		jg      loc_D0EA1B // jump to exit if [eax+ecx*4-84h] - edx > 0

		C code for opcodes 0x29-0x2b, where ecx is the opcode and eax is a pointer on the stack at esp+0x18 :
		if ([eax+ecx*4-0x94] >= abc && [eax+ecx*4-84h] <= def) {
			fetch_next();
			continue; 
		} else 
		{
			return;
		}


opcodes 0x2c-0x2f use loc_d0e940
	loc_d0e940 contains the routine that is fired when opcode is > 0x6b, meaning they aren't supported

opcodes 0x1d-0x1f use loc_d0e940
	loc_d0e940 contains the routine that is fired when opcode is > 0x6b, meaning they aren't supported

opcodes 0x54-0x5f use loc_d0e940
	loc_d0e940 contains the routine that is fired when opcode is > 0x6b, meaning they aren't supported


opcodes 0x30-0x4f (32 different opcodes) use loc_d0e9e0
	ecx contains the opcode, add 0xFFFFFFD0 to it. ecx now contains 0x0-0x1f

	put thing at esi+0x2c into esi. esi was storing the address to the stack where the min and max coords
	were (if this is confirmed to be checking against a bounding box). So maybe, go to next node in tree?

	put into eax, an argument [ebp+0x10] 

	add ecx to esi, offset esi anywhere from 0 to 31 according to the opcode 0x30-0x4f

	put into ecx, a commonly accessed stack element [esp+0x18]

	it turns out this stack-element ([esp+0x18]) is a pointer, 
	put into edi, the value obtained at the address

	edi is now a pointer, so that thing about esp+0x18 being a pointer, it's really a pointer-pointer.
	put into edx, [edi+0x8]


	some arithmetic and jump:
	shl     eax, 8 // eax has [ebp+0x10] in it
	and     edx, 3FFFFFFFh // edx had something in it, change the most sig 6 bits to 0 if they weren't already
	or      esi, eax // y u do dis?
	cmp     [edi+4], edx // value under the one put into edx is compared to (edx&0x3fffffff)
	jnz     short loc_D0EA0F

	/*the jump is to skip a call*/

	replace the compare & jump with something like this:

	if(*(edi+4) != edx) {
		sub_c2f940(edi, 4);
	}
	mov     eax, [edi+4]
	mov     ecx, [edi]
	mov     [ecx+eax*4], esi
	add     dword ptr [edi+4], 1
	/*ending section*/
	pop     edi
	pop     esi
	pop     ebx
	mov     esp, ebp
	pop     ebp
	retn    0Ch


opcodes 0x20-0x22 handled by loc_d0e5ee
	has two operands: 'a' is a number constant, 'b' is number of bytes to jump,
	As usual the ecx register contains the opcode
	if [esi + ecx*4-0x80] <= a: continue else {add_and_jump}

	add_and_jump:
		adds 'b' to the program counter. (the program-counter used to point to the next opcode)
		if [esi+ecx*4-0x70] > a: continue else loc_D0E60F

	loc_D0E60F:
		mov     edx, [ebp+arg_8]
		push    edx
		mov     ecx, ebx
		sub     ecx, eax // eax has operand 'a' (number of bytes to jump)
		push    ecx	 //push program-counter onto stack
		mov     ecx, [esp+0x20]
		push    esi
		call    sub_D0E3A0 //recursion
		jmp     loc_D0E3D9 // this is continue


opcodes 0x23-0x25 are handled by loc_d0e627
	there are 6 operands: a,b,c,d,e,f
	let eax = ([esi+ecx*4-0x7c]<<8) + d // a 16-byte (possibly more) potential offset to program-counter
	if [esi+ecx*4-0x8c] - a > 0: loc_d0e669 else { 
		if [esp+0x1c] >= [esp+14]: exit else { add eax to program-counter; continue} 
	}

loc_d0e669:
let ef be an int16 made by shifting e left 8 bits and adding f.
add ef to the program-counter
if [esp+0x1c] >= [esp+0x14]: continue else {recursive_stuff}

recursive_stuff:
	mov     edx, [ebp+0x10]
	sub     eax, ecx //ecx holds 'ef', so this un-does the jump
	mov     ecx, [esp+0x18]
	push    edx
	add     eax, ebx
	push    eax
	push    esi
	call    sub_D0E3A0 //recursion
	jmp     loc_D0E3D9 // continue

opcode 0x50 handled by loc_d0e992
    operands 'a'
    put 'a' into ecx
    do routine for opcodes 0x30-0x4f (minus the starting bit where ecx is put in the range of 0x00-0x1f)

opcode 0x51 handled by loc_d0e998
    two operands: 'a', 'b' form to make int16 'ab' where 'a' is in the higher-byte. This is put in ecx
    do routine for opcodes 0x30-0x4f (minus the starting bit where ecx is put in the range of 0x00-0x1f)

opcode 0x52 handled by loc_d0e9a7
    three operands 'a', 'b', 'c' form to make an int24 'abc' where 'a' is in the highest byte, and 'c' is in lowest
    do routine for opcodes 0x30-0x4f (minus the starting bit where ecx is put in the range of 0x00-0x1f)

opcode 0x53 handled by loc_d0e9bf
    four operands 'a', 'b', 'c', 'd' form to make int32 'abcd' where 'a' is in the highest byte and 'd' is in lowest
    do routine for opcodes 0x30-0x4f (minus the starting bit where ecx is put in the range of 0x00-0x1f)
    
opcodes 0x60-0x63 handled by loc_d0e8ca
    operand 'a' 
    put zero-extended operand a into [esp+ecx*4-0x12c] 
    jump to loc_D0E91C;

loc_D0E91C:
    put into eax, [esp+0x54]
    if esi != esp+0x20:
        mov     ecx, 10h 
        lea     edi, [esp+20h]
        rep movsd // moves ecx double-words from ds:esi to es:edi
        lea     esi, [esp+20h]
    
    put into [esp+0x54] eax
    continue
    
opcodes 0x64-0x67 handled by loc_d0e8da
    like opcodes 0x60-0x63 but two operands 'a' and 'b' make an int16 with 'a' in higher byte
    that is put into same memory loc as opcodes 0x60-0x63
    
opcodes 0x68-6b handled by loc_d0e8f3

like opcodes 0x60-0x63 but four operands 'a', 'b', 'c', 'd' make an int32 with 'a' in the highest byte
and 'd' in the lowest byte. This is put into the same memory loc as opcodes 0x60-0x63.


opcode 0x00 
exit 

opcode 0x1c handled by loc_d0e54b

load 'b' into eax and 'a' into edx and [esi] into ecx
subtract 0xaa (170) from eax
multiply eax by 3
store it into [esp+0x14]
load [esi+0x10] into eax


    
jump table for MOPP opcodes. The last index is 0x6b, anything greater is not a valid MOPP opcode.

0x0 -> 0xd0ea1b /
0x1 -> 0xd0e77b
0x2 -> 0xd0e77b
0x3 -> 0xd0e77b
0x4 -> 0xd0e77b
0x5 -> 0xd0e71a
0x6 -> 0xd0e727
0x7 -> 0xd0e73d
0x8 -> 0xd0e940
0x9 -> 0xd0e831
0xa -> 0xd0e858
0xb -> 0xd0e888
0xc -> 0xd0e75c
0xd -> 0xd0e8c2
0xe -> 0xd0e940
0xf -> 0xd0e940
0x10 -> 0xd0e5b8
0x11 -> 0xd0e5b8
0x12 -> 0xd0e5b8
0x13 -> 0xd0e3f3
0x14 -> 0xd0e414
0x15 -> 0xd0e43f
0x16 -> 0xd0e45f
0x17 -> 0xd0e489
0x18 -> 0xd0e4a9
0x19 -> 0xd0e4cd
0x1a -> 0xd0e4f5
0x1b -> 0xd0e520
0x1c -> 0xd0e54b
0x1d -> 0xd0e940 /
0x1e -> 0xd0e940 /
0x1f -> 0xd0e940 /
0x20 -> 0xd0e5ee /
0x21 -> 0xd0e5ee /
0x22 -> 0xd0e5ee /
0x23 -> 0xd0e627 /
0x24 -> 0xd0e627 /
0x25 -> 0xd0e627 /
0x26 -> 0xd0e69e /
0x27 -> 0xd0e69e /
0x28 -> 0xd0e69e /
0x29 -> 0xd0e6c8 /
0x2a -> 0xd0e6c8 /
0x2b -> 0xd0e6c8 /
0x2c -> 0xd0e940 /
0x2d -> 0xd0e940 /
0x2e -> 0xd0e940 /
0x2f -> 0xd0e940 /
0x30 -> 0xd0e9e0 /
0x31 -> 0xd0e9e0 /
0x32 -> 0xd0e9e0 /
0x33 -> 0xd0e9e0 /
0x34 -> 0xd0e9e0 /
0x35 -> 0xd0e9e0 /
0x36 -> 0xd0e9e0 /
0x37 -> 0xd0e9e0 /
0x38 -> 0xd0e9e0 /
0x39 -> 0xd0e9e0 /
0x3a -> 0xd0e9e0 /
0x3b -> 0xd0e9e0 /
0x3c -> 0xd0e9e0 /
0x3d -> 0xd0e9e0 /
0x3e -> 0xd0e9e0 /
0x3f -> 0xd0e9e0 /
0x40 -> 0xd0e9e0 /
0x41 -> 0xd0e9e0 /
0x42 -> 0xd0e9e0 /
0x43 -> 0xd0e9e0 /
0x44 -> 0xd0e9e0 /
0x45 -> 0xd0e9e0 /
0x46 -> 0xd0e9e0 /
0x47 -> 0xd0e9e0 /
0x48 -> 0xd0e9e0 /
0x49 -> 0xd0e9e0 /
0x4a -> 0xd0e9e0 /
0x4b -> 0xd0e9e0 /
0x4c -> 0xd0e9e0 /
0x4d -> 0xd0e9e0 /
0x4e -> 0xd0e9e0 /
0x4f -> 0xd0e9e0 /
0x50 -> 0xd0e992 /
0x51 -> 0xd0e998 /
0x52 -> 0xd0e9a7 /
0x53 -> 0xd0e9bf /
0x54 -> 0xd0e940 /
0x55 -> 0xd0e940 / 
0x56 -> 0xd0e940 /
0x57 -> 0xd0e940 /
0x58 -> 0xd0e940 /
0x59 -> 0xd0e940 /
0x5a -> 0xd0e940 /
0x5b -> 0xd0e940 /
0x5c -> 0xd0e940 /
0x5d -> 0xd0e940 /
0x5e -> 0xd0e940 /
0x5f -> 0xd0e940 /
0x60 -> 0xd0e8ca /
0x61 -> 0xd0e8ca /
0x62 -> 0xd0e8ca /
0x63 -> 0xd0e8ca /
0x64 -> 0xd0e8da /
0x65 -> 0xd0e8da /
0x66 -> 0xd0e8da /
0x67 -> 0xd0e8da /
0x68 -> 0xd0e8f3 /
0x69 -> 0xd0e8f3 /
0x6a -> 0xd0e8f3 /
0x6b -> 0xd0e8f3 /
